podtitulne<-podtitulne[,`SK NACE`,LINK]
setkey(podtitulne,LINK)
## Prepojenie podla linku
setkey(ommitedColumns2014,LINK)
setkey(ommitedColumns2015,LINK)
Result <- merge(ommitedColumns2015,ommitedColumns2014, all=FALSE)
Result <- merge(ommitedColumns2015,ommitedColumns2014, all=FALSE)
Result <- merge(podtitulne,Result, all=FALSE)
Result<-Result[,!"ICO.y",with=FALSE ]
## Pomenovanie stlpcov
columnNames <- c("LINK","SK NACE","Ico","Cisty obrat2015","Výnosy z hospodárskej činnosti spolu súčet2015","Tržby z predaja dlhodobého nehmotného majetku, dlhodobého hmotného majetku a materiálu2015",
"Náklady na hospodársku činnosť spolu2015","Výsledok hospodárenia z hospodárskej činnosti2015","Pridaná hodnota2015","Výnosy z finančnej činnosti spolu2015","Náklady na finančnú činnosť spolu2015",
"Výsledok hospodárenia z finančnej činnosti2015","Výsledok hospodárenia za účtovné obdobie pred zdanením2015","Výsledok hospodárenia za účtovné obdobie po zdanení2015",
"Cisty obrat2014","Výnosy z hospodárskej činnosti spolu súčet2014","Tržby z predaja dlhodobého nehmotného majetku, dlhodobého hmotného majetku a materiálu2014",
"Náklady na hospodársku činnosť spolu2014","Výsledok hospodárenia z hospodárskej činnosti2014","Pridaná hodnota2014","Výnosy z finančnej činnosti spolu2014","Náklady na finančnú činnosť spolu2014",
"Výsledok hospodárenia z finančnej činnosti2014","Výsledok hospodárenia za účtovné obdobie pred zdanením2014","Výsledok hospodárenia za účtovné obdobie po zdanení2014")
colnames(Result) <- columnNames
print(paste("Bude nahradenych",length(Result[Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`==""]$LINK),"zaznamov nulou"))
Result[Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`==""]$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`<-"0" #5323 nul bolo pridanych
## Sub ciariek v desatinnych za bodky
Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2015`<-gsub(",",".",Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2015`)
Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`<-gsub(",",".",Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`)
## Vypocet rozdielu zisku a pridanie do tabulky
RozdielZiskuPoZdaneni2015_2014<-as.double(Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2015`)-as.double(Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`)
Result$RozdielZiskuPoZdaneni2015_2014 <- RozdielZiskuPoZdaneni2015_2014
return(Result)
}
ResultPOD <- preparePODCsv()
########################################################################
prepareMUJCsv <- function(){
mujzs<-getCsv("../Data/MUJZS.csv")
clear2014 <- mujzs
clear2015 <- mujzs[!mujzs$S1R38=="",]
clear2015<-clear2015[clear2015$S2R38!="EMPTY!",]
print(paste("Bolo odstranenych", length(mujzs$S1R38)- length(clear2015$S1R38), "zaznamov"))
ommitedColumns2014<-clear2014[,list(ICO,LINK,S2R1,S2R2,S2R8,S2R18,S2R19,S2R20,S2R27,S2R34,S2R35,S2R38)]
ommitedColumns2015<-clear2015[,list(ICO,LINK,S1R1,S1R2,S1R8,S1R18,S1R19,S1R20,S1R27,S1R34,S1R35,S1R38)]
mujtitulne<-getCsv("../Data/MUJTitulne.csv")
mujtitulne<-mujtitulne[,`SK NACE`,LINK]
setkey(mujtitulne,LINK)
setkey(ommitedColumns2014,LINK)
setkey(ommitedColumns2015,LINK)
Result <- merge(ommitedColumns2015,ommitedColumns2014, all=FALSE)
Result <- merge(ommitedColumns2015,ommitedColumns2014, all=FALSE)
Result <- merge(mujtitulne,Result, all=FALSE)
Result<-Result[,!"ICO.y",with=FALSE ]
## Pomenovanie stlpcov
columnNames <- c("LINK","SK NACE","Ico","Výnosy z hospodárskej činnosti spolu súčet (r. 02 až r. 07)2015", "Tržby z predaja tovaru (604, 607)2015",  "Náklady na hospodársku činnosť spolu súčet (r. 09 až r. 17)2015", "Výsledok hospodárenia z hospodárskej činnosti (+/-) (r. 01 - r. 08)2015",
"Pridaná hodnota (r. 02 - r. 09) + (r. 03 + r. 04 + r. 05) - (r. 10 + r. 11)2015", "Výnosy z finančnej činnosti spolu súčet (r. 21 až r. 26)2015", "Náklady na finančnú činnosť spolu súčet (r. 28 až r. 33)2015", "Výsledok hospodárenia z finančnej činnosti (+/-) (r. 20 - r. 27)2015",
"Výsledok hospodárenia za účtovné obdobie pred zdanením (+/-) (r. 18 + r. 34)2015", "Výsledok hospodárenia za účtovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2015",
"Výnosy z hospodárskej činnosti spolu súčet (r. 02 až r. 07)2014", "Tržby z predaja tovaru (604, 607)2014",  "Náklady na hospodársku činnosť spolu súčet (r. 09 až r. 17)2014", "Výsledok hospodárenia z hospodárskej činnosti (+/-) (r. 01 - r. 08)2014",
"Pridaná hodnota (r. 02 - r. 09) + (r. 03 + r. 04 + r. 05) - (r. 10 + r. 11)2014", "Výnosy z finančnej činnosti spolu súčet (r. 21 až r. 26)2014", "Náklady na finančnú činnosť spolu súčet (r. 28 až r. 33)2014", "Výsledok hospodárenia z finančnej činnosti (+/-) (r. 20 - r. 27)2014",
"Výsledok hospodárenia za účtovné obdobie pred zdanením (+/-) (r. 18 + r. 34)2014", "Výsledok hospodárenia za účtovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014")
colnames(Result) <- columnNames
print(paste("Bude nahradenych",length(Result[Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014`==""]$LINK),"zaznamov nulou"))
Result[Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014`==""]$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014`<-"0" #5323 nul bolo pridanych
## Sub ciariek v desatinnych za bodky
Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2015`<-gsub(",",".",Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2015`)
Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014`<-gsub(",",".",Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014`)
## Vypocet rozdielu zisku a pridanie do tabulky
RozdielZiskuPoZdaneni2015_2014<-as.double(Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2015`)-as.double(Result$`Výsledok hospodárenia za úctovné obdobie po zdanení (+/-) (r. 35 - r. 36 - r. 37)2014`)
Result$RozdielZiskuPoZdaneni2015_2014 <- RozdielZiskuPoZdaneni2015_2014
return(Result)
}
ResultMUJ <- prepareMUJCsv()
ResultPOD
preparePODCsv <- function(){
podzs<-getCsv("../Data/PODZS.csv")
## ziskanie empty hodnot Výsledok hospodárenia za účtovné obdobie po zdanení
clear2014 <- podzs
clear2015 <- podzs[!podzs$S1R61=="",]
clear2015<-clear2015[clear2015$S1R61!="EMPTY!",]
print(paste("Bolo odstranenych", length(podzs$S1R61)- length(clear2015$S1R61), "zaznamov"))
## Vyber udajov hrubym
ommitedColumns2014<-clear2014[,list(ICO,LINK,S2R1,S2R2,S2R8,S2R10,S2R27,S2R28,S2R29,S2R45,S2R55,S2R56,S2R61)]
ommitedColumns2015<-clear2015[,list(ICO,LINK,S1R1,S1R2,S1R8,S1R10,S1R27,S1R28,S1R29,S1R45,S1R55,S1R56,S1R61)]
## Nacitanie titulnych stran
podtitulne<-getCsv("../Data/PODTitulne.csv")
podtitulne<-podtitulne[,`SK NACE`,LINK]
setkey(podtitulne,LINK)
## Prepojenie podla linku
setkey(ommitedColumns2014,LINK)
setkey(ommitedColumns2015,LINK)
Result <- merge(ommitedColumns2015,ommitedColumns2014, all=FALSE)
Result <- merge(ommitedColumns2015,ommitedColumns2014, all=FALSE)
Result <- merge(podtitulne,Result, all=FALSE)
Result<-Result[,!"ICO.y",with=FALSE ]
## Pomenovanie stlpcov
columnNames <- c("LINK","SK NACE","Ico","Cisty obrat2015","Výnosy z hospodárskej činnosti spolu súčet2015","Tržby z predaja dlhodobého nehmotného majetku, dlhodobého hmotného majetku a materiálu2015",
"Náklady na hospodársku činnosť spolu2015","Výsledok hospodárenia z hospodárskej činnosti2015","Pridaná hodnota2015","Výnosy z finančnej činnosti spolu2015","Náklady na finančnú činnosť spolu2015",
"Výsledok hospodárenia z finančnej činnosti2015","Výsledok hospodárenia za účtovné obdobie pred zdanením2015","Výsledok hospodárenia za účtovné obdobie po zdanení2015",
"Cisty obrat2014","Výnosy z hospodárskej činnosti spolu súčet2014","Tržby z predaja dlhodobého nehmotného majetku, dlhodobého hmotného majetku a materiálu2014",
"Náklady na hospodársku činnosť spolu2014","Výsledok hospodárenia z hospodárskej činnosti2014","Pridaná hodnota2014","Výnosy z finančnej činnosti spolu2014","Náklady na finančnú činnosť spolu2014",
"Výsledok hospodárenia z finančnej činnosti2014","Výsledok hospodárenia za účtovné obdobie pred zdanením2014","Výsledok hospodárenia za účtovné obdobie po zdanení2014")
colnames(Result) <- columnNames
print(paste("Bude nahradenych",length(Result[Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`==""]$LINK),"zaznamov nulou"))
Result[Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`==""]$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`<-"0" #5323 nul bolo pridanych
## Sub ciariek v desatinnych za bodky
Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2015`<-gsub(",",".",Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2015`)
Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`<-gsub(",",".",Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`)
## Vypocet rozdielu zisku a pridanie do tabulky
RozdielZiskuPoZdaneni2015_2014<-as.double(Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2015`)-as.double(Result$`Výsledok hospodárenia za úctovné obdobie po zdanení2014`)
Result$RozdielZiskuPoZdaneni2015_2014 <- RozdielZiskuPoZdaneni2015_2014
return(Result)
}
ResultPOD <- preparePODCsv()
podzs<-getCsv("../Data/PODZS.csv")
podzs<-getCsv("../Data/PODZS.csv")
setwd('.')
podzs<-getCsv("../Data/PODZS.csv")
getwd
getwd()
setwd('.')
getwd()
plot(cars)
plot(cars)
Insert Chunk
plot(cars)
plot(cars)
install.packages("RPostgreSQL")
require("RPostgreSQL")
require("RPostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "openpg", password = pw)
drv <- dbDriver("PostgreSQL")
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "openpg", password = pw)
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "OZNAL"))
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
require("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
print(con)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "DataMiner_development",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Fedora",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "DataMiner_development",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
print(dbGetQuery(con, "SELECT * from users"))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "DataMiner_development"))
print(dbGetQuery(con, "SELECT * from accounts"))
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "DataMiner_development",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "users"))
print(dbGetQuery(con, "SELECT * from accounts"))
dbDisconnect(con)
dbUnloadDriver(drv)
getCsv <- function(name, encoding="UTF-8"){
return (fread(name, encoding = encoding))
}
saveCsv <- function(data_table, path, encoding="UTF-8") {
con<-file(path, encoding = encoding)
fwrite(data_table, path)
close(con)
}
library(RPostgreSQL)
library(ggplot2)
library(data.table)
dbDisconnect(con)
dbUnloadDriver(drv)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "DataMiner_development",
host = "localhost", port = 5432,
user = "postgres", password = "postgres")
print(dbExistsTable(con, "users"))
users <- getCsv('/home/msalat/School/DiplomaProject/DataMiner/tmp/data.csv')
users
users <- getCsv('/home/msalat/School/DiplomaProject/DataMiner/tmp/data.csv')
users <- getCsv('/home/msalat/School/DiplomaProject/DataMiner/tmp/data.csv')
users
uniq
head(users)
cl_predict
library('clue')
cl_predict
saveRDS
saveRDS ?
c
? saveRDS
loadR
5.5
5,5
scale
scale(c(2,4))
sd(c(2,4))
c(1,2)
as.double(c(1,2))
c(1,2) / 2
as.double(c(1,2)) / 2
min_maz
min_max
library(MASS)
Boston
Boston$medv
varImpPlot
data.table(c(1,2))
data.table(
data.table
data.table
data.table
library(data.table)
data.table(c(1,2))
rbind(data.table(c(1,2)), c(1,2))
rbind(data.table(c(1,2)), t(c(1,2))
)
t(c(1,3))
c(1,3)
rbind(data.table(c(1,2)), t(c(3,4))
rbind(data.table(c(1,2)), t(c(3,4)))
rbind(data.table(c(1,2)), t(c(3,4)))
rbind(data.table(c(1,2)), c(3,4))
rbind(data.table(c(1,2)), data.table(c(3,4)))
data.table()
rbind(data.table(), data.table(c(1,2)))
set.seed(1000)
library(ggplot2)
library(data.table)
library(clue)
library(randomForest)
require(randomForest)
library(ggplot2)
library(data.table)
library(clue)
require(randomForest)
as.factor(c(1,2))
install.packages('corrplot')
createCorrplot <- function(data) {
library(corrplot)
col4 <- colorRampPalette(c("#7F0000","red","#FF7F00","yellow","#7FFF7F", "cyan", "#007FFF", "blue","#00007F"))
#png(height=1200, width=1500, pointsize=15, file="overlapp.png")
corrplot(cor(data, use="complete"), method=c("number"), bg = "grey10",
addgrid.col = "gray50", tl.cex=1,
tl.col = "black",
col = colorRampPalette(c("yellow","green","navyblue"))(100))
}
install.packages('rcompanion')
install.packages('pbkrtest')
install.packages('rgl)
''
''a
install.packages('rgl')
install.packages('car')
install.packages('RVAideMemoire')
install.packages('mixOmics')
install.packages('rgl')
install.packages('rgl')
install.packages('rgl')
install.packages('rgl')
install.packages('rcompanion')
library(MASS)
library(dbscan)
library(DBSCAN)
install.packages('dbscan')
fviz_silhouette <- function(sil.obj, label = FALSE, print.summary = TRUE, ...){
if(inherits(sil.obj, c("eclust", "hcut", "pam", "clara", "fanny"))){
df <- as.data.frame(sil.obj$silinfo$widths)
}
else if(inherits(sil.obj, "silhouette"))
df <- as.data.frame(sil.obj[, 1:3])
else stop("Don't support an oject of class ", class(sil.obj))
# order by cluster and by sil_width
df <- df[order(df$cluster, -df$sil_width), ]
if(!is.null(rownames(df))) df$name <- factor(rownames(df), levels = rownames(df))
else df$name <- as.factor(1:nrow(df))
df$cluster <- as.factor(df$cluster)
mapping <- aes_string(x = "name", y = "sil_width",
color = "cluster", fill = "cluster")
p <- ggplot(df, mapping) +
geom_bar(stat = "identity") +
labs(y = "Silhouette width Si", x = "",
title = paste0("Silhouette graf",
"\n Priemerná hodnota koeficientu: ",
round(mean(df$sil_width), 2)))+
ggplot2::ylim(c(NA, 1))+
geom_hline(yintercept = mean(df$sil_width), linetype = "dashed", color = "red" )
p <- ggpubr::ggpar(p, ...)
# Labels
if(!label) p <- p + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
else if(label)
p <- p + theme(axis.text.x = element_text(angle=45))
# Print summary
ave <- tapply(df$sil_width, df$cluster, mean)
n <- tapply(df$cluster, df$cluster, length)
sil.sum <- data.frame(cluster = names(ave), size = n,
ave.sil.width = round(ave,2))
if(print.summary) print(sil.sum)
p
}
? importIntoEnv
? importance
library(ggplot2)
library(data.table)
library(clue)
library(cluster)
library(randomForest)
library(rcompanion)
library(MASS)
library(dbscan)
set.seed(1000)
getCsv <- function(name, encoding="UTF-8"){
return (fread(name, encoding = encoding))
}
saveCsv <- function(data_table, path, encoding="UTF-8") {
con<-file(path, encoding = encoding)
fwrite(data_table, path)
close(con)
}
z_min <- function(vector) {
sd_v = sd(vector)
min_v = min(vector)
return ((vector - min_v) / sd_v)
}
z_mean <- function(vector) { # eq to scale function
sd_v = sd(vector)
mean_v = mean(vector)
return((vector - mean_v) / sd_v)
}
min_max <- function(vector) {
min_v = min(vector)
max_v = max(vector)
return((vector - min_v) / (max_v - min_v))
}
tree_func <- function(final_model, tree_num) {
require(dplyr)
require(ggraph)
require(igraph)
# get tree by index
tree <- randomForest::getTree(final_model,
k = tree_num,
labelVar = TRUE) %>%
tibble::rownames_to_column() %>%
# make leaf split points to NA, so the 0s won't get plotted
mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
# prepare data frame for graph
graph_frame <- data.frame(from = rep(tree$rowname, 2),
to = c(tree$`left daughter`, tree$`right daughter`))
# convert to graph and delete the last node that we don't want to plot
graph <- graph_from_data_frame(graph_frame) %>%
delete_vertices("0")
# set node labels
V(graph)$node_label <- gsub("_", " ", as.character(tree$`split var`))
V(graph)$leaf_label <- as.character(tree$prediction)
V(graph)$split <- as.character(round(tree$`split point`, digits = 2))
# plot
plot <- ggraph(graph, 'dendrogram') +
theme_bw() +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = "white") +
geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE,
repel = TRUE, colour = "white", fontface = "bold", show.legend = FALSE) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 18))
print(plot)
}
fviz_silhouette <- function(sil.obj, label = FALSE, print.summary = TRUE, ...){
if(inherits(sil.obj, c("eclust", "hcut", "pam", "clara", "fanny"))){
df <- as.data.frame(sil.obj$silinfo$widths)
}
else if(inherits(sil.obj, "silhouette"))
df <- as.data.frame(sil.obj[, 1:3])
else stop("Don't support an oject of class ", class(sil.obj))
# order by cluster and by sil_width
df <- df[order(df$cluster, -df$sil_width), ]
if(!is.null(rownames(df))) df$name <- factor(rownames(df), levels = rownames(df))
else df$name <- as.factor(1:nrow(df))
df$cluster <- as.factor(df$cluster)
mapping <- aes_string(x = "name", y = "sil_width",
color = "cluster", fill = "cluster")
p <- ggplot(df, mapping) +
geom_bar(stat = "identity") +
labs(y = "Silhouette koeficient Si", x = "",
title = paste0("Silhouette graf",
"\nPriemerná hodnota koeficientu: ",
round(mean(df$sil_width), 2)))+
ggplot2::ylim(c(NA, 1))+
geom_hline(yintercept = mean(df$sil_width), linetype = "dashed", color = "red" )
p <- ggpubr::ggpar(p, ...)
# Labels
if(!label) p <- p + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
else if(label)
p <- p + theme(axis.text.x = element_text(angle=45))
# Print summary
ave <- tapply(df$sil_width, df$cluster, mean)
n <- tapply(df$cluster, df$cluster, length)
sil.sum <- data.frame(cluster = names(ave), size = n,
ave.sil.width = round(ave,2))
if(print.summary) print(sil.sum)
p
}
createCorrplot <- function(data) {
library(corrplot)
col4 <- colorRampPalette(c("#7F0000","red","#FF7F00","yellow","#7FFF7F", "cyan", "#007FFF", "blue","#00007F"))
#png(height=1200, width=1500, pointsize=15, file="overlapp.png")
corrplot(cor(data, use="complete"), method=c("number"), bg = "grey10",
addgrid.col = "gray50", tl.cex=1,
tl.col = "black",
col = colorRampPalette(c("yellow","green","navyblue"))(100))
}
boxCox <- function(data, attr) {
Box = boxcox(data[, get(attr)] + abs(min(data[, get(attr)])) + 1 ~ 1, lambda = seq(-6,6,0.1), plotit = FALSE)
Cox = data.frame(Box$x, Box$y)
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),]
Cox2[1,]
lambda = Cox2[1, "Box.x"]
T_box = ((data[, get(attr)] + abs(min(data[, get(attr)])) + 1) ^ lambda - 1) / lambda
return(T_box)
}
# setwd('~/School/DiplomaProject/StructureRecommendation/')
# users_csv <- getCsv('./Data/data_so_eng.csv')
? importance
? set
source('./support_functions')
setwd('/home/msalat/School/DiplomaProject/DataMiner/app/jobs/bandit_jobs/R')
source('./support_functions')
setwd('/home/msalat/School/DiplomaProject/DataMiner/app/jobs/bandit_jobs/R/')
source('./support_functions')
setwd('/home/msalat/School/DiplomaProject/DataMiner/app/jobs/bandit_jobs/R/')
source('./support_functions.R')
stackletter_users <- getCsv('../../../../tmp/stackeletter_users.csv')
stackletter_users <- getCsv('../../../../../tmp/stackeletter_users.csv')
stackletter_users <- getCsv('../../../tmp/stackeletter_users.csv')
stackletter_users <- getCsv('../../../../tmp/stackletter_users.csv')
model <- readRDS('./final_uc_8.md')
segments <- c()
for(row in 1:nrow(stackletter_users)){
new_segment <- cl_predict(model, users[row, 3:ncol(stackletter_users)])
segments = c(segments, new_segment)
}
segments <- c()
for(row in 1:nrow(stackletter_users)){
new_segment <- cl_predict(model, stackletter_users[row, 3:ncol(stackletter_users)])
segments = c(segments, new_segment)
}
segments+
c
segments
segments_data <- data.table(stackletter_users$id, segments)
segments_data
segments_data <- data.table(stackletter_users$id, segments)
saveCsv('../../../../tmp/stackletter_users_with_segments.csv')
saveCsv(path = '../../../../tmp/stackletter_users_with_segments.csv')
segments_data <- data.table(stackletter_users$id, segments)
saveCsv(path = '../../../../tmp/stackletter_users_with_segments.csv')
segments_data <- data.table(stackletter_users$id, segments)
saveCsv(segments_data, '../../../../tmp/stackletter_users_with_segments.csv')
